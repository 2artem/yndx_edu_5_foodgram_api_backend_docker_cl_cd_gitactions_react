name: Django-app workflow

on: [push]

jobs:
  tests:
    # «Раннер» — создание изолированного окружения с последней версией Ubuntu 
    runs-on: ubuntu-latest

    steps:
    # Запуск actions checkout — готового скрипта 
    # для клонирования репозитория
    - uses: actions/checkout@v2
    - name: Set up Python
      # Запуск actions setup-python — готового скрипта 
      # для развёртывания окружения Python
      uses: actions/setup-python@v2
      with:
        # Выбор версии Python
        python-version: 3.7

    - name: Install dependencies
      run: |
        # обновление pip
        python -m pip install --upgrade pip 
        # установка flake8 и его плагинов
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        # установка зависимостей
        pip install -r backend/grocery_assistant/requirements.txt

    - name: Test with flake8 and django tests
      run: |
        python -m flake8

    - name: Test with flake8 and django tests
      run: |
        # запуск проверки проекта по flake8
        python -m flake8
        # перейти в папку, содержащую manage.py — 
        cd backend/grocery_assistant/
        # запустить написанные разработчиком тесты
        python manage.py test

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Проверка доступности репозитория Docker Hub для workflow
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        # Вызов сборщика контейнеров docker
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker
        # Запуск скрипта авторизации на Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{  secrets.DOCKER_USERNAME  }}
          password: ${{  secrets.DOCKER_PASSWORD  }}

      - name: Push backend to Docker Hub
        # Пуш образа в Docker Hub 
        uses: docker/build-push-action@v2
        with:
          context: ./backend/grocery_assistant
          push: true
          # tags: ваш-логин-на-docker-hub/ваш-репозиторий-на-docker-hub:latest
          tags: ${{  secrets.DOCKER_USERNAME  }}/foodgram_backend:latest
          #tags: avchasovskikh/yamdb:latest

      - name: Push frontend to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{  secrets.DOCKER_USERNAME  }}/foodgram_frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker-compose stop
            sudo docker-compose rm -f web
            sudo docker image rm ${{  secrets.DOCKER_USERNAME  }}/foodgram_backend:latest
            # скачиваем образы с docker registry
            sudo docker pull ${{  secrets.DOCKER_USERNAME  }}/foodgram_backend:latest
            sudo docker pull ${{  secrets.DOCKER_USERNAME  }}/foodgram_frontend:latest
            # наполняем переменные окружения для запуска приложения
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker-compose up -d

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен! Шампанского!
